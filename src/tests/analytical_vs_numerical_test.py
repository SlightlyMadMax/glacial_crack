import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime

spy = 60.*60.*24.  # Seconds per day
Lf = 334000.0  # Latent heat of fusion (J/kg)
rho_ice = 918.9
rho_w = 999.84
Ks = spy*2.1  # Conductivity of ice (J/mKs)
cs = 2097.  # Heat capacity of ice (J/kgK) - ** Van der Veen uses 2097 but see Tr and Aschwanden 2012)
ks = Ks/(rho_w*cs)  # Cold ice diffusivity (m2/sec)


# Problem Constants
s0 = 9.0
t0 = 0.
Tm = 0.0
T_ = -10.0


ts = np.arange(0, 36, 1)


def boundary(t):
    return s0 + 2*cs*(Tm - T_)*(ks*t)**.5/(np.pi**.5*Lf)


# num = [9.0, 9.020924587881403, 9.03044859909075, 9.037638416543487, 9.043658800073075, 9.04894297816199, 9.053708764480344, 9.058083997447328, 9.062151292228062, 9.065967694156335, 9.069574550863315, 9.073002966075123, 9.076277035263402, 9.07941587513874, 9.0824349548065, 9.085347001566351, 9.088162636538287, 9.090890832524584, 9.093539251336566, 9.096114497238322, 9.098622310674248, 9.101067718626243, 9.103455152908158, 9.105788544377747, 9.108071398800211, 9.110306858550564, 9.112497753257536, 9.114646641718911, 9.11675584685955, 9.118827485093394, 9.120863491146963, 9.122865639173305, 9.124835560812317, 9.126774760720371, 9.128684629989747, 9.130566457797991]
num = [9.0, 9.0203555983652, 9.028849389731763, 9.035355049341282, 9.040835223079917, 9.045661082930424, 9.050022584125593, 9.05403242582456, 9.057763975315279, 9.061268162433256, 9.064582051657341, 9.067733613474543, 9.070744571781008, 9.073632198263494, 9.076410493891514, 9.079090995473837, 9.081683343195047, 9.084195690394678, 9.086635006088306, 9.089007302669659, 9.09131781023884, 9.09357111209523, 9.095771251472842, 9.097921816644002, 9.100026009519842, 9.102086701498234, 9.10410647934218, 9.106087683181299, 9.108032438228738, 9.109942681439092, 9.111820184059816, 9.113666570823915, 9.115483336375764, 9.11727185940243, 9.119033414850591, 9.120769184536739]


error = []
for i in range(1, 36):
    error.append(100*abs(num[i]-boundary(ts[i]))/(boundary(ts[i])-9.0))

plt.plot(ts, num, 'r', lw=0.5, label='Numerical')
plt.plot(ts, boundary(ts), 'k', lw=0.5, label='Analytical')
plt.legend()
plt.ylim(s0, s0+0.15)
plt.xlim(0, 36)
plt.ylabel('m')
plt.xlabel('days')
plt.savefig('../../graphs/comparison/1d.png')

plt.clf()
plt.plot(ts[1:36], error, 'k', lw=2, label='Relative error, %')
plt.legend()

plt.ylim(0, 10)
plt.xlim(0, 36)

plt.ylabel('%')
plt.xlabel('days')
plt.savefig('../../graphs/error/1d.png')
