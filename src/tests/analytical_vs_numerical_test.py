import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime

spd = 60.*60.*24.  # Seconds per day
Lf = 334000.0  # Latent heat of fusion (J/kg)
rho_ice = 918.9
rho_w = 999.84
Ks = spd*2.1  # Conductivity of ice (J/mKs)
cs = 2097.  # Heat capacity of ice (J/kgK) - ** Van der Veen uses 2097 but see Tr and Aschwanden 2012)
ks = Ks/(rho_w*cs)  # Cold ice diffusivity (m2/sec)


# Problem Constants
s0 = 9.0
t0 = 0.
Tm = 0.0
T_ = -10.0


ts = np.arange(0, 36, 1)


def boundary(t):
    return s0 + 2*cs*(Tm - T_)*(ks*t)**.5/(np.pi**.5*Lf)


# num = [9.0, 9.020924587881403, 9.03044859909075, 9.037638416543487, 9.043658800073075, 9.04894297816199, 9.053708764480344, 9.058083997447328, 9.062151292228062, 9.065967694156335, 9.069574550863315, 9.073002966075123, 9.076277035263402, 9.07941587513874, 9.0824349548065, 9.085347001566351, 9.088162636538287, 9.090890832524584, 9.093539251336566, 9.096114497238322, 9.098622310674248, 9.101067718626243, 9.103455152908158, 9.105788544377747, 9.108071398800211, 9.110306858550564, 9.112497753257536, 9.114646641718911, 9.11675584685955, 9.118827485093394, 9.120863491146963, 9.122865639173305, 9.124835560812317, 9.126774760720371, 9.128684629989747, 9.130566457797991]
num = [9.0, 9.02035076828873, 9.028855311328792, 9.035369302169642, 9.040856541286537, 9.04568865334149, 9.050055827231063, 9.054070901383138, 9.057807334218396, 9.061316118774625, 9.064634365656966, 9.067790080327981, 9.070805014054315, 9.073696459996931, 9.076478436721048, 9.079162495491426, 9.08175828853532, 9.084273979565113, 9.086716546537232, 9.089092009086256, 9.091405604010054, 9.093661920274991, 9.095865006314996, 9.098018455088072, 9.100125472450951, 9.102188933446328, 9.104211428014054, 9.10619529935865, 9.10814267547401, 9.110055495693581, 9.111935533472638, 9.113784415481799, 9.115603638356538, 9.117394582464073, 9.119158524454868, 9.120896647729232]


error = []
for i in range(1, 36):
    error.append(100*abs(num[i]-boundary(ts[i]))/(boundary(ts[i])-9.0))

plt.plot(ts, num, 'r', lw=0.5, label='Numerical')
plt.plot(ts, boundary(ts), 'k', lw=0.5, label='Analytical')
plt.legend()
plt.ylim(s0, s0+0.15)
plt.xlim(0, 36)
plt.ylabel('m')
plt.xlabel('days')
plt.savefig('../../graphs/comparison/1d.png')

plt.clf()
plt.plot(ts[1:36], error, 'k', lw=2, label='Relative error, %')
plt.legend()

plt.ylim(0, 10)
plt.xlim(0, 36)

plt.ylabel('%')
plt.xlabel('days')
plt.savefig('../../graphs/error/1d.png')
