import numpy as np
import matplotlib.pyplot as plt

spy = 60.*60.*24.  # Seconds per day
Lf = 334000.0  # Latent heat of fusion (J/kg)
rho_ice = 918.9
rho_w = 999.84
Ks = spy*2.1  # Conductivity of ice (J/mKs)
cs = 2097.  # Heat capacity of ice (J/kgK) - ** Van der Veen uses 2097 but see Tr and Aschwanden 2012)
ks = Ks/(rho_w*cs)  # Cold ice diffusivity (m2/sec)


# Problem Constants
s0 = 9.0
t0 = 0.
Tm = 0.0
T_ = -10.0


ts = np.arange(0, 36, 1)


def boundary(t):
    return s0 + 2*cs*(Tm - T_)*(ks*t)**.5/(np.pi**.5*Lf)


# num = [9.0, 9.036905091555115, 9.053871028916232, 9.06689177879918, 9.077872490113107, 9.087550069050595, 9.09630219328231, 9.104353136318197, 9.11184899081569, 9.11889121764705, 9.125553682214894, 9.131892142912431, 9.137949916257394, 9.143761448354518, 9.149354667256187, 9.154752589269124, 9.159974449509718, 9.165036518371826, 9.169952704399565, 9.17473500813404, 9.179393869629319, 9.183938438588275, 9.188376787190174, 9.19271607980439, 9.196962709807638, 9.20112241097817, 9.20520034901299, 9.209201197338583, 9.213129200389348, 9.216988226796548, 9.220781814387049, 9.224513208482476, 9.22818539467909, 9.231801127050442, 9.235362952530693, 9.238873232092288]

num = [9.0, 9.019735599651556, 9.028839480670099, 9.035818358554605, 9.041699299927037, 9.046879259394204, 9.051561573384483, 9.055866940179307, 9.0598739593757, 9.063637204961163, 9.067196399920336, 9.07058152472008, 9.073815866673419, 9.076917941976241, 9.079902761453997, 9.082782694747923, 9.08556807846931, 9.088267655346447, 9.09088889845247, 9.093438255262638, 9.095921334515456, 9.098343051454217, 9.100707742247575, 9.103019255224794, 9.105281024421611, 9.107496129456415, 9.109667344719348, 9.1117971801173, 9.1138879150816, 9.115941627151953, 9.117960216157844, 9.119945424798866, 9.121898856258426, 9.123821989357467, 9.125716191655393, 9.127582730828285]


error = []
for i in range(1, 36):
    error.append(100*abs(num[i]-boundary(ts[i]))/(boundary(ts[i])-9.0))

plt.plot(ts, num, 'r', lw=0.5, label='Numerical')
plt.plot(ts, boundary(ts), 'k', lw=0.5, label='Analytical')
plt.legend()
plt.ylim(s0, s0+0.15)
plt.xlim(0, 36)
plt.ylabel('m')
plt.xlabel('days')
plt.savefig('comparison')

plt.clf()
plt.plot(ts[1:36], error, 'k', lw=2, label='Relative error, %')
plt.legend()

plt.ylim(0, 10)
plt.xlim(0, 36)

plt.ylabel('%')
plt.xlabel('days')
plt.savefig('error')
